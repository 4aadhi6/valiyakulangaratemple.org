
import React, { useState, useContext, FormEvent, ChangeEvent, useEffect } from 'react';
import { AppContext } from '../../contexts/AppContext';
import { Language, Pooja } from '../../types';
import { generateDescriptionForPooja } from '../../services/geminiService';
import * as templeDataService from '../../services/templeDataService';
import { PlusCircleIcon, TrashIcon, PencilSquareIcon, SparklesIcon } from '@heroicons/react/24/outline';

const AdminPoojaManager: React.FC = () => {
  const { templeData, fetchTempleData, language, isLoadingData } = useContext(AppContext);
  // Poojas are now part of templeData fetched from backend
  // const [poojas, setPoojas] = useState<Pooja[]>(templeData.poojas); // Local state not needed if AppContext is source of truth
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentPooja, setCurrentPooja] = useState<Partial<Pooja>>({});
  const [isEditing, setIsEditing] = useState(false);
  const [editingPoojaId, setEditingPoojaId] = useState<string | null>(null);
  const [geminiLoading, setGeminiLoading] = useState(false);
  const [formLoading, setFormLoading] = useState(false);

  // Effect to update form when templeData.poojas changes (e.g., after fetch)
  // This helps if we directly use templeData.poojas for rendering list
  // For now, modal handling is separate.

  const openModalForNew = () => {
    // ID will be generated by backend, so we don't set it here.
    setCurrentPooja({ name: '', nameMalayalam: '', description: '', descriptionMalayalam: '', uses: '', image: 'https://picsum.photos/seed/newpooja/400/300', price: '' });
    setIsEditing(false);
    setEditingPoojaId(null);
    setIsModalOpen(true);
  };

  const openModalForEdit = (pooja: Pooja) => {
    setCurrentPooja({ ...pooja });
    setIsEditing(true);
    setEditingPoojaId(pooja.id);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setCurrentPooja({});
    setEditingPoojaId(null);
  };

  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setCurrentPooja(prev => ({ ...prev, [name]: value }));
  };

  const handleGenerateDescription = async () => {
    if (!currentPooja.name && !currentPooja.nameMalayalam) {
      alert(language === Language.EN ? "Please enter Pooja name first (English or Malayalam)." : "ദയവായി ആദ്യം പൂജയുടെ പേര് നൽകുക (ഇംഗ്ലീഷ് അല്ലെങ്കിൽ മലയാളം).");
      return;
    }
    setGeminiLoading(true);
    try {
      const baseNameForEn = currentPooja.name || currentPooja.nameMalayalam; // Use whichever is available for English
      const baseNameForMl = currentPooja.nameMalayalam || currentPooja.name; // Use whichever is available for Malayalam

      const descEn = baseNameForEn ? await generateDescriptionForPooja(baseNameForEn) : "";
      const descMl = baseNameForMl ? await generateDescriptionForPooja(baseNameForMl, "in Malayalam") : "";
      
      setCurrentPooja(prev => ({
        ...prev,
        description: typeof descEn === 'string' && !descEn.startsWith("Error") && !descEn.startsWith("Gemini API is not configured") ? descEn : prev.description,
        descriptionMalayalam: typeof descMl === 'string' && !descMl.startsWith("Error") && !descMl.startsWith("Gemini API is not configured") ? descMl : prev.descriptionMalayalam,
      }));

    } catch (error) {
      console.error("Error generating description:", error);
      alert(language === Language.EN ? "Failed to generate description." : "വിവരണം സൃഷ്ടിക്കുന്നതിൽ പരാജയപ്പെട്ടു.");
    }
    setGeminiLoading(false);
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!currentPooja.name) { // Basic validation
        alert(language === Language.EN ? "Pooja name is required." : "പൂജയുടെ പേര് ആവശ്യമാണ്.");
        return;
    }
    setFormLoading(true);
    try {
      if (isEditing && editingPoojaId) {
        await templeDataService.updatePooja(editingPoojaId, currentPooja);
      } else {
        await templeDataService.addPooja(currentPooja as Omit<Pooja, 'id'>);
      }
      await fetchTempleData(); // Refresh data in context
      closeModal();
    } catch (error) {
        console.error("Failed to save pooja:", error);
        alert(language === Language.EN ? "Failed to save pooja." : "പൂജ സംരക്ഷിക്കുന്നതിൽ പരാജയപ്പെട്ടു.");
    } finally {
        setFormLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm(language === Language.EN ? 'Are you sure you want to delete this Pooja?' : 'ഈ പൂജ ഇല്ലാതാക്കാൻ നിങ്ങൾക്ക് ഉറപ്പുണ്ടോ?')) {
      setFormLoading(true); // Indicate loading for delete operation
      try {
        await templeDataService.deletePooja(id);
        await fetchTempleData(); // Refresh data
      } catch (error) {
        console.error("Failed to delete pooja:", error);
        alert(language === Language.EN ? "Failed to delete pooja." : "പൂജ ഇല്ലാതാക്കുന്നതിൽ പരാജയപ്പെട്ടു.");
      } finally {
        setFormLoading(false);
      }
    }
  };

  const inputClass = "w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700 dark:text-white text-sm";
  const labelClass = "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1";

  if (isLoadingData && templeData.poojas.length === 0) {
      return <p>{language === Language.EN ? "Loading poojas..." : "പൂജകൾ ലോഡ് ചെയ്യുന്നു..."}</p>;
  }

  return (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
      <div className="flex justify-between items-center mb-6">
        <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-100">
          {language === Language.EN ? 'Manage Poojas' : 'പൂജകൾ കൈകാര്യം ചെയ്യുക'}
        </h3>
        <button
          onClick={openModalForNew}
          disabled={formLoading}
          className="flex items-center px-4 py-2 bg-green-500 text-white text-sm font-medium rounded-md hover:bg-green-600 transition-colors disabled:opacity-50"
        >
          <PlusCircleIcon className="h-5 w-5 mr-2" />
          {language === Language.EN ? 'Add Pooja' : 'പൂജ ചേർക്കുക'}
        </button>
      </div>

      <div className="space-y-4">
        {templeData.poojas.map((pooja) => (
          <div key={pooja.id} className="p-4 border dark:border-gray-700 rounded-lg flex justify-between items-center bg-gray-50 dark:bg-gray-700/50">
            <div>
              <p className="font-semibold text-gray-800 dark:text-gray-100">{language === Language.EN ? pooja.name : pooja.nameMalayalam}</p>
              <p className="text-xs text-gray-500 dark:text-gray-400">{pooja.price ? (language === Language.EN ? `Price: ${pooja.price}`: `നിരക്ക്: ${pooja.price}`) : (language === Language.EN ? 'Price not set' : 'നിരക്ക് സജ്ജമാക്കിയിട്ടില്ല')}</p>
            </div>
            <div className="space-x-2">
              <button onClick={() => openModalForEdit(pooja)} disabled={formLoading} className="p-2 text-blue-500 hover:text-blue-700 disabled:opacity-50"><PencilSquareIcon className="h-5 w-5"/></button>
              <button onClick={() => handleDelete(pooja.id)} disabled={formLoading} className="p-2 text-red-500 hover:text-red-700 disabled:opacity-50"><TrashIcon className="h-5 w-5"/></button>
            </div>
          </div>
        ))}
         {templeData.poojas.length === 0 && !isLoadingData && <p className="text-center text-gray-500 dark:text-gray-400 py-4">{language === Language.EN ? "No poojas added yet." : "പൂജകളൊന്നും ചേർത്തിട്ടില്ല."}</p>}
      </div>

      {isModalOpen && (
        <div className="fixed inset-0 z-[70] bg-black/50 backdrop-blur-sm flex items-center justify-center p-4" onClick={closeModal}>
          <form onSubmit={handleSubmit} className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] overflow-y-auto space-y-4" onClick={e => e.stopPropagation()}>
            <h4 className="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-4">
              {isEditing ? (language === Language.EN ? 'Edit Pooja' : 'പൂജ തിരുത്തുക') : (language === Language.EN ? 'Add New Pooja' : 'പുതിയ പൂജ ചേർക്കുക')}
            </h4>
            
            <div><label htmlFor="name" className={labelClass}>{language === Language.EN ? 'Name (English)' : 'പേര് (ഇംഗ്ലീഷ്)'}</label><input type="text" name="name" id="name" value={currentPooja.name || ''} onChange={handleChange} className={inputClass} required disabled={formLoading || geminiLoading} /></div>
            <div><label htmlFor="nameMalayalam" className={labelClass}>{language === Language.EN ? 'Name (Malayalam)' : 'പേര് (മലയാളം)'}</label><input type="text" name="nameMalayalam" id="nameMalayalam" value={currentPooja.nameMalayalam || ''} onChange={handleChange} className={inputClass} required disabled={formLoading || geminiLoading}/></div>
            
            <div>
                <label htmlFor="description" className={labelClass}>{language === Language.EN ? 'Description (English)' : 'വിവരണം (ഇംഗ്ലീഷ്)'}</label>
                <textarea name="description" id="description" value={currentPooja.description || ''} onChange={handleChange} rows={3} className={inputClass} disabled={formLoading || geminiLoading} />
            </div>
            <div>
                <label htmlFor="descriptionMalayalam" className={labelClass}>{language === Language.EN ? 'Description (Malayalam)' : 'വിവരണം (മലയാളം)'}</label>
                <textarea name="descriptionMalayalam" id="descriptionMalayalam" value={currentPooja.descriptionMalayalam || ''} onChange={handleChange} rows={3} className={inputClass} disabled={formLoading || geminiLoading} />
            </div>
            <button type="button" onClick={handleGenerateDescription} disabled={geminiLoading || formLoading} className="flex items-center text-sm px-3 py-1.5 bg-purple-500 hover:bg-purple-600 text-white rounded-md transition-colors disabled:opacity-50">
                <SparklesIcon className="h-4 w-4 mr-1.5" />
                {geminiLoading ? (language === Language.EN ? 'Generating...' : 'സൃഷ്ടിക്കുന്നു...') : (language === Language.EN ? 'Generate with AI' : 'AI ഉപയോഗിച്ച് സൃഷ്ടിക്കുക')}
            </button>

            <div><label htmlFor="uses" className={labelClass}>{language === Language.EN ? 'Uses/Benefits' : 'ഉപയോഗങ്ങൾ/പ്രയോജനങ്ങൾ'}</label><textarea name="uses" id="uses" value={currentPooja.uses || ''} onChange={handleChange} rows={2} className={inputClass} disabled={formLoading || geminiLoading} /></div>
            <div><label htmlFor="image" className={labelClass}>{language === Language.EN ? 'Image URL' : 'ചിത്രത്തിന്റെ URL'}</label><input type="url" name="image" id="image" value={currentPooja.image || ''} onChange={handleChange} className={inputClass} placeholder="https://picsum.photos/400/300" disabled={formLoading || geminiLoading}/></div>
            <div><label htmlFor="price" className={labelClass}>{language === Language.EN ? 'Price (e.g., ₹501)' : 'നിരക്ക് (ഉദാ: ₹501)'}</label><input type="text" name="price" id="price" value={currentPooja.price || ''} onChange={handleChange} className={inputClass} disabled={formLoading || geminiLoading} /></div>

            <div className="flex justify-end space-x-3 pt-4">
              <button type="button" onClick={closeModal} disabled={formLoading} className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors disabled:opacity-50">
                {language === Language.EN ? 'Cancel' : 'റദ്ദാക്കുക'}
              </button>
              <button type="submit" disabled={formLoading || geminiLoading} className="px-4 py-2 text-sm font-medium text-white bg-orange-500 rounded-md hover:bg-orange-600 transition-colors disabled:opacity-50">
                {formLoading ? (language === Language.EN ? 'Saving...' : 'സേവ് ചെയ്യുന്നു...') : (language === Language.EN ? (isEditing ? 'Save Changes' : 'Add Pooja') : (isEditing ? 'മാറ്റങ്ങൾ സംരക്ഷിക്കുക' : 'പൂജ ചേർക്കുക'))}
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
};

export default AdminPoojaManager;
